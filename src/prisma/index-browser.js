
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Access_typeScalarFieldEnum = {
  access_type_id: 'access_type_id',
  access_name: 'access_name'
};

exports.Prisma.BranchScalarFieldEnum = {
  branch_id: 'branch_id',
  branch_city: 'branch_city',
  branch_address: 'branch_address',
  branch_phone: 'branch_phone',
  branch_email: 'branch_email',
  created_at: 'created_at'
};

exports.Prisma.CartScalarFieldEnum = {
  cart_id: 'cart_id',
  order_id: 'order_id',
  product_id: 'product_id',
  quantity: 'quantity',
  sub_total_amount: 'sub_total_amount',
  created_at: 'created_at'
};

exports.Prisma.CategoryScalarFieldEnum = {
  category_id: 'category_id',
  category_name: 'category_name'
};

exports.Prisma.CustomerScalarFieldEnum = {
  customer_id: 'customer_id',
  customer_name: 'customer_name',
  customer_email: 'customer_email',
  customer_phone: 'customer_phone',
  customer_address: 'customer_address',
  visit_count: 'visit_count',
  rewards_points: 'rewards_points',
  created_at: 'created_at'
};

exports.Prisma.DiscountScalarFieldEnum = {
  discount_id: 'discount_id',
  discount_name: 'discount_name',
  discount_desc: 'discount_desc',
  discount_percentage: 'discount_percentage'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  employee_id: 'employee_id',
  employee_name: 'employee_name',
  role_id: 'role_id',
  hired_date: 'hired_date',
  employee_email: 'employee_email',
  employee_phone: 'employee_phone',
  branch_id: 'branch_id',
  employee_image: 'employee_image',
  branch_updated_on: 'branch_updated_on',
  role_updated_on: 'role_updated_on'
};

exports.Prisma.InventoryScalarFieldEnum = {
  product_id: 'product_id',
  branch_id: 'branch_id',
  quantity: 'quantity',
  reorder_level: 'reorder_level',
  updated_on: 'updated_on'
};

exports.Prisma.Payment_methodScalarFieldEnum = {
  payment_method_id: 'payment_method_id',
  payment_method_name: 'payment_method_name'
};

exports.Prisma.ProductScalarFieldEnum = {
  product_id: 'product_id',
  product_name: 'product_name',
  product_desc: 'product_desc',
  category_id: 'category_id',
  product_image: 'product_image',
  buying_price: 'buying_price',
  retail_price: 'retail_price',
  discount: 'discount',
  supplier_id: 'supplier_id',
  product_barcode: 'product_barcode',
  removed: 'removed',
  created_at: 'created_at',
  updated_on: 'updated_on'
};

exports.Prisma.Sales_historyScalarFieldEnum = {
  order_id: 'order_id',
  customer_id: 'customer_id',
  cashier_id: 'cashier_id',
  branch_id: 'branch_id',
  created_at: 'created_at',
  total_amount: 'total_amount',
  profit: 'profit',
  rewards_points: 'rewards_points',
  payment_method_id: 'payment_method_id',
  reference_id: 'reference_id',
  product_count: 'product_count'
};

exports.Prisma.SupplierScalarFieldEnum = {
  supplier_id: 'supplier_id',
  supplier_name: 'supplier_name',
  supplier_email: 'supplier_email',
  supplier_phone: 'supplier_phone',
  supplier_address: 'supplier_address'
};

exports.Prisma.User_credentialsScalarFieldEnum = {
  user_id: 'user_id',
  username: 'username',
  password: 'password',
  updated_on: 'updated_on'
};

exports.Prisma.User_roleScalarFieldEnum = {
  role_id: 'role_id',
  role_name: 'role_name',
  role_desc: 'role_desc',
  user_access: 'user_access'
};

exports.Prisma.Variable_optionsScalarFieldEnum = {
  variable_id: 'variable_id',
  variable_name: 'variable_name',
  created_at: 'created_at',
  variable_value: 'variable_value',
  updated_on: 'updated_on'
};

exports.Prisma.Working_hourScalarFieldEnum = {
  employee_id: 'employee_id',
  branch_id: 'branch_id',
  date: 'date',
  shift_on: 'shift_on',
  shift_off: 'shift_off',
  updated_by: 'updated_by',
  present: 'present',
  total_hours: 'total_hours'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  access_type: 'access_type',
  branch: 'branch',
  cart: 'cart',
  category: 'category',
  customer: 'customer',
  discount: 'discount',
  employee: 'employee',
  inventory: 'inventory',
  payment_method: 'payment_method',
  product: 'product',
  sales_history: 'sales_history',
  supplier: 'supplier',
  user_credentials: 'user_credentials',
  user_role: 'user_role',
  variable_options: 'variable_options',
  working_hour: 'working_hour'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
